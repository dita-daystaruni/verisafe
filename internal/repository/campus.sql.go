// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: campus.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCampus = `-- name: CreateCampus :one
INSERT INTO campus (
  campus_name, campus_address, city, county, zip_code, country, established_year, picture_url
) VALUES ( 
$1, $2, $3, $4, $5, $6, $7, $8

)
RETURNING id, campus_name, campus_address, city, county, zip_code, country, established_year, picture_url, is_active
`

type CreateCampusParams struct {
	CampusName      string      `json:"campus_name"`
	CampusAddress   pgtype.Text `json:"campus_address"`
	City            pgtype.Text `json:"city"`
	County          pgtype.Text `json:"county"`
	ZipCode         pgtype.Text `json:"zip_code"`
	Country         pgtype.Text `json:"country"`
	EstablishedYear pgtype.Int4 `json:"established_year"`
	PictureUrl      pgtype.Text `json:"picture_url"`
}

func (q *Queries) CreateCampus(ctx context.Context, arg CreateCampusParams) (Campus, error) {
	row := q.db.QueryRow(ctx, createCampus,
		arg.CampusName,
		arg.CampusAddress,
		arg.City,
		arg.County,
		arg.ZipCode,
		arg.Country,
		arg.EstablishedYear,
		arg.PictureUrl,
	)
	var i Campus
	err := row.Scan(
		&i.ID,
		&i.CampusName,
		&i.CampusAddress,
		&i.City,
		&i.County,
		&i.ZipCode,
		&i.Country,
		&i.EstablishedYear,
		&i.PictureUrl,
		&i.IsActive,
	)
	return i, err
}

const deleteCampus = `-- name: DeleteCampus :exec
DELETE FROM campus
  WHERE id = $1
`

func (q *Queries) DeleteCampus(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCampus, id)
	return err
}

const getAllCampuses = `-- name: GetAllCampuses :many
SELECT id, campus_name, campus_address, city, county, zip_code, country, established_year, picture_url, is_active FROM campus
LIMIT $1
OFFSET $2
`

type GetAllCampusesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllCampuses(ctx context.Context, arg GetAllCampusesParams) ([]Campus, error) {
	rows, err := q.db.Query(ctx, getAllCampuses, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Campus{}
	for rows.Next() {
		var i Campus
		if err := rows.Scan(
			&i.ID,
			&i.CampusName,
			&i.CampusAddress,
			&i.City,
			&i.County,
			&i.ZipCode,
			&i.Country,
			&i.EstablishedYear,
			&i.PictureUrl,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCampusByID = `-- name: GetCampusByID :one
SELECT id, campus_name, campus_address, city, county, zip_code, country, established_year, picture_url, is_active FROM campus WHERE id = $1
`

func (q *Queries) GetCampusByID(ctx context.Context, id uuid.UUID) (Campus, error) {
	row := q.db.QueryRow(ctx, getCampusByID, id)
	var i Campus
	err := row.Scan(
		&i.ID,
		&i.CampusName,
		&i.CampusAddress,
		&i.City,
		&i.County,
		&i.ZipCode,
		&i.Country,
		&i.EstablishedYear,
		&i.PictureUrl,
		&i.IsActive,
	)
	return i, err
}

const updateCampusByID = `-- name: UpdateCampusByID :one
UPDATE campus
  SET  
    campus_name = COALESCE(campus_name, $1),
    campus_address = COALESCE(campus_address, $2),
    city = COALESCE(city, $3),
    county = COALESCE(county, $4),
    zip_code = COALESCE(zip_code, $5),
    country = COALESCE(country, $6),
    established_year = COALESCE(established_year, $7),
    picture_url = COALESCE(picture_url, $8)
  WHERE id = $9
RETURNING id, campus_name, campus_address, city, county, zip_code, country, established_year, picture_url, is_active
`

type UpdateCampusByIDParams struct {
	CampusName      string      `json:"campus_name"`
	CampusAddress   pgtype.Text `json:"campus_address"`
	City            pgtype.Text `json:"city"`
	County          pgtype.Text `json:"county"`
	ZipCode         pgtype.Text `json:"zip_code"`
	Country         pgtype.Text `json:"country"`
	EstablishedYear pgtype.Int4 `json:"established_year"`
	PictureUrl      pgtype.Text `json:"picture_url"`
	ID              uuid.UUID   `json:"id"`
}

func (q *Queries) UpdateCampusByID(ctx context.Context, arg UpdateCampusByIDParams) (Campus, error) {
	row := q.db.QueryRow(ctx, updateCampusByID,
		arg.CampusName,
		arg.CampusAddress,
		arg.City,
		arg.County,
		arg.ZipCode,
		arg.Country,
		arg.EstablishedYear,
		arg.PictureUrl,
		arg.ID,
	)
	var i Campus
	err := row.Scan(
		&i.ID,
		&i.CampusName,
		&i.CampusAddress,
		&i.City,
		&i.County,
		&i.ZipCode,
		&i.Country,
		&i.EstablishedYear,
		&i.PictureUrl,
		&i.IsActive,
	)
	return i, err
}
