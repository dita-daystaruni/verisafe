// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getActiveUsers = `-- name: GetActiveUsers :many
SELECT id, username, firstname, othernames, phone, email, gender, active, created_at, modified_at, date_of_birth, national_id FROM users
WHERE active = true LIMIT $1 OFFSET $2
`

type GetActiveUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetActiveUsers(ctx context.Context, arg GetActiveUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getActiveUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Firstname,
			&i.Othernames,
			&i.Phone,
			&i.Email,
			&i.Gender,
			&i.Active,
			&i.CreatedAt,
			&i.ModifiedAt,
			&i.DateOfBirth,
			&i.NationalID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, username, firstname, othernames, phone, email, gender, active, created_at, modified_at, date_of_birth, national_id FROM users
LIMIT $1 OFFSET $2
`

type GetAllUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllUsers(ctx context.Context, arg GetAllUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Firstname,
			&i.Othernames,
			&i.Phone,
			&i.Email,
			&i.Gender,
			&i.Active,
			&i.CreatedAt,
			&i.ModifiedAt,
			&i.DateOfBirth,
			&i.NationalID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInActiveUsers = `-- name: GetInActiveUsers :many
SELECT id, username, firstname, othernames, phone, email, gender, active, created_at, modified_at, date_of_birth, national_id FROM users
WHERE active = false LIMIT $1 OFFSET $2
`

type GetInActiveUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetInActiveUsers(ctx context.Context, arg GetInActiveUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getInActiveUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Firstname,
			&i.Othernames,
			&i.Phone,
			&i.Email,
			&i.Gender,
			&i.Active,
			&i.CreatedAt,
			&i.ModifiedAt,
			&i.DateOfBirth,
			&i.NationalID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, firstname, othernames, phone, email, gender, active, created_at, modified_at, date_of_birth, national_id FROM users 
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Firstname,
		&i.Othernames,
		&i.Phone,
		&i.Email,
		&i.Gender,
		&i.Active,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.DateOfBirth,
		&i.NationalID,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, firstname, othernames, phone, email, gender, active, created_at, modified_at, date_of_birth, national_id FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Firstname,
		&i.Othernames,
		&i.Phone,
		&i.Email,
		&i.Gender,
		&i.Active,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.DateOfBirth,
		&i.NationalID,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, firstname, othernames, phone, email, gender, active, created_at, modified_at, date_of_birth, national_id FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Firstname,
		&i.Othernames,
		&i.Phone,
		&i.Email,
		&i.Gender,
		&i.Active,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.DateOfBirth,
		&i.NationalID,
	)
	return i, err
}
