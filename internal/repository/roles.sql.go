// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: roles.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const assignRole = `-- name: AssignRole :one
INSERT INTO user_roles (user_id, role_id, assigned_at, modified_at)
VALUES ($1, $2, NOW(),NOW())
RETURNING user_id, role_id, assigned_at, modified_at
`

type AssignRoleParams struct {
	UserID uuid.UUID `json:"user_id"`
	RoleID int32     `json:"role_id"`
}

func (q *Queries) AssignRole(ctx context.Context, arg AssignRoleParams) (UserRole, error) {
	row := q.db.QueryRow(ctx, assignRole, arg.UserID, arg.RoleID)
	var i UserRole
	err := row.Scan(
		&i.UserID,
		&i.RoleID,
		&i.AssignedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const createRole = `-- name: CreateRole :one
INSERT INTO roles (name, description)
VALUES ($1, $2)
RETURNING id, name, description, created_at, modified_at
`

type CreateRoleParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, createRole, arg.Name, arg.Description)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
delete from roles
where id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRole, id)
	return err
}

const getAllRoles = `-- name: GetAllRoles :many
select id, name, description, created_at, modified_at
from roles
limit $1
offset $2
`

type GetAllRolesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllRoles(ctx context.Context, arg GetAllRolesParams) ([]Role, error) {
	rows, err := q.db.Query(ctx, getAllRoles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoleByName = `-- name: GetRoleByName :one
select id, name, description, created_at, modified_at
from roles
where name = $1
limit 1
`

func (q *Queries) GetRoleByName(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRow(ctx, getRoleByName, name)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}
