// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: roles.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRole = `-- name: CreateRole :one
INSERT INTO roles (role_name, description, created_at, modified_at)
VALUES ($1, $2, NOW(), NOW())
RETURNING id, role_name, description, created_at, modified_at
`

type CreateRoleParams struct {
	RoleName    string      `json:"role_name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, createRole, arg.RoleName, arg.Description)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.RoleName,
		&i.Description,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles
WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRole, id)
	return err
}

const getRoleByID = `-- name: GetRoleByID :one
SELECT id, role_name, description, created_at, modified_at
FROM roles
WHERE id = $1
`

func (q *Queries) GetRoleByID(ctx context.Context, id int32) (Role, error) {
	row := q.db.QueryRow(ctx, getRoleByID, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.RoleName,
		&i.Description,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getRoleByNameFuzzy = `-- name: GetRoleByNameFuzzy :many
SELECT id, role_name, description, created_at, modified_at
FROM roles
WHERE role_name ILIKE '%' || $1 || '%'
`

func (q *Queries) GetRoleByNameFuzzy(ctx context.Context, dollar_1 pgtype.Text) ([]Role, error) {
	rows, err := q.db.Query(ctx, getRoleByNameFuzzy, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.RoleName,
			&i.Description,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllRoles = `-- name: ListAllRoles :many
SELECT id, role_name, description, created_at, modified_at
FROM roles
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListAllRolesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAllRoles(ctx context.Context, arg ListAllRolesParams) ([]Role, error) {
	rows, err := q.db.Query(ctx, listAllRoles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.RoleName,
			&i.Description,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :one
UPDATE roles
SET
    role_name = COALESCE($2, role_name),
    description = COALESCE($3, description),
    modified_at = NOW()
WHERE id = $1
RETURNING id, role_name, description, created_at, modified_at
`

type UpdateRoleParams struct {
	ID          int32       `json:"id"`
	RoleName    string      `json:"role_name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, updateRole, arg.ID, arg.RoleName, arg.Description)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.RoleName,
		&i.Description,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}
